name: Release and Publish

on:
  push:
    tags:
      - 'v*'  # v1.0.0, v2.1.3 등의 태그가 푸시될 때 실행

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Get package info
      id: package
      run: |
        echo "name=$(node -p "require('./package.json').name")" >> $GITHUB_OUTPUT
        echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        echo "tag_version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Verify version match
      run: |
        if [ "${{ steps.package.outputs.version }}" != "${{ steps.package.outputs.tag_version }}" ]; then
          echo "❌ Package version (${{ steps.package.outputs.version }}) does not match tag version (${{ steps.package.outputs.tag_version }})"
          exit 1
        fi
        echo "✅ Version match confirmed: ${{ steps.package.outputs.version }}"
    
    - name: Check if version exists on NPM
      id: version-check
      run: |
        if npm view ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} > /dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️ Version ${{ steps.package.outputs.version }} already exists on NPM"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ Version ${{ steps.package.outputs.version }} is new"
        fi
    
    - name: Run tests
      run: npm test
      if: steps.version-check.outputs.exists == 'false'
    
    - name: Run linter
      run: npm run lint
      if: steps.version-check.outputs.exists == 'false'
    
    - name: Type check
      run: npm run type-check
      if: steps.version-check.outputs.exists == 'false'
    
    - name: Build
      run: npm run build
      if: steps.version-check.outputs.exists == 'false'
    
    - name: Publish to NPM
      run: |
        echo "🚀 Publishing ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }} to NPM..."
        if [[ "${{ steps.package.outputs.name }}" == @* ]]; then
          npm publish --access public
        else
          npm publish
        fi
        echo "✅ Successfully published to NPM!"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      if: steps.version-check.outputs.exists == 'false'
    
    - name: Generate changelog
      id: changelog
      run: |
        # 이전 태그와의 차이점을 기반으로 간단한 changelog 생성
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## 🔄 Changes since $PREVIOUS_TAG" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> RELEASE_NOTES.md
        else
          echo "## 🎉 Initial Release" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "This is the first release of ${{ steps.package.outputs.name }}!" >> RELEASE_NOTES.md
        fi
        echo "" >> RELEASE_NOTES.md
        echo "## 📦 Installation" >> RELEASE_NOTES.md
        echo '```bash' >> RELEASE_NOTES.md
        echo "npm install ${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}" >> RELEASE_NOTES.md
        echo '```' >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## 🌐 CDN Usage" >> RELEASE_NOTES.md
        echo '```html' >> RELEASE_NOTES.md
        echo '<script src="https://unpkg.com/${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}/dist/player.min.js"></script>' >> RELEASE_NOTES.md
        echo '<link rel="stylesheet" href="https://unpkg.com/${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}/dist/player.css">' >> RELEASE_NOTES.md
        echo '```' >> RELEASE_NOTES.md
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      if: steps.version-check.outputs.exists == 'false'
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ steps.package.outputs.version }}
        path: dist/
        retention-days: 30
      if: steps.version-check.outputs.exists == 'false'
    
    - name: Notify success
      run: |
        echo "🎉 Release completed successfully!"
        echo "📦 Package: https://www.npmjs.com/package/${{ steps.package.outputs.name }}"
        echo "🌐 CDN: https://unpkg.com/${{ steps.package.outputs.name }}@${{ steps.package.outputs.version }}/"
        echo "📋 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
      if: steps.version-check.outputs.exists == 'false'